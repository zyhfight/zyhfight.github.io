<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WebController</title>
    <url>/2019/06/25/WebController/</url>
    <content><![CDATA[<h2 id="跨域请求支持"><a href="#跨域请求支持" class="headerlink" title="跨域请求支持"></a>跨域请求支持</h2><pre><code>/**
 * AbstractJsonpResponseBodyAdvice 过时了;
 * 使用ResponseBodyAdvice支持力度jsonp
 * 支持跨域请求，主持jsonp
 * @author : zyh
 * @Description : com.demo.controller.advice
 * @date : 2019-07-25 00:09
 */
@ControllerAdvice(basePackages = &quot;com.demo.controller&quot;)
public class WebControllerJsonpAdvice extends AbstractJsonpResponseBodyAdvice {

    public WebControllerJsonpAdvice() {
        super(&quot;callback&quot;, &quot;jsonp&quot;);
    }
}</code></pre><a id="more"></a>

<h2 id="WebMvcConfigurerAdapter"><a href="#WebMvcConfigurerAdapter" class="headerlink" title="WebMvcConfigurerAdapter"></a>WebMvcConfigurerAdapter</h2><pre><code>/**
 * json adapter 配置
 * controller返回json格式内容
 * @author : zyh
 * @Description : com.demo.conf
 * @date : 2019-07-25 00:24
 */
@Configuration
public class WebMvcConfAdapter extends WebMvcConfigurerAdapter {

    @Override
    public void configureContentNegotiation(ContentNegotiationConfigurer configurer){
        Map&lt;String, MediaType&gt; mediaTypeMap = new HashMap&lt;&gt;();
        mediaTypeMap.put(&quot;json&quot;, MediaType.APPLICATION_JSON_UTF8);
        mediaTypeMap.put(&quot;html&quot;, MediaType.TEXT_HTML);
        configurer.favorPathExtension(false);
        configurer.defaultContentType(MediaType.APPLICATION_JSON_UTF8);
        configurer.ignoreAcceptHeader(true);
        configurer.mediaTypes(mediaTypeMap);

    }
}</code></pre>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybstis -- TypeHandler</title>
    <url>/2019/05/26/Mybstis-TypeHandler/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目中原有的多时区解决方案是统一时区为UTC，数据库&amp;应用设置时区为UTC，这种方式限制了平台使用环境，在扩展性上也有局限性。</p>
<p>优化方案：数据库存储层面将日期的存储类型转化为unsigned bigint，数据库&amp;应用不再做UTC时区的设置，采用区域默认时区或维护的时区，不做特殊要求。</p>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>实践中发现，</p>
<p>1、java Date不能直接转为unsigned bigint存储；</p>
<p>2、db的timestamp存入unsigne bigint字段，并不是真实时间戳，而是yyyyMMddHHmmssmsms格式。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了尽量减少代码改动，自定义TypeHandler，实现Java Date转Long类型时间戳，然后存入db。</p>
<p>sqlMap中jdbcType=timestamp，同步改为jdbcType=bigint</p>
<h2 id="Mybatis-TypeHandler"><a href="#Mybatis-TypeHandler" class="headerlink" title="Mybatis TypeHandler"></a>Mybatis TypeHandler</h2><p>无论是MyBatis在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型。Mybatis默认为我们实现了许多TypeHandler，当没有配置指定TypeHandler时，Mybatis会根据参数或返回结果的不同，默认选择合适的TypeHandler处理。</p>
<p>那么，Mybatis实现了哪些TypeHandler呢？如何自定义实现一个TypeHandler呢？</p>
<h3 id="XMLConfigBuilder"><a href="#XMLConfigBuilder" class="headerlink" title="XMLConfigBuilder"></a>XMLConfigBuilder</h3><p>XMLConfigBuilder是对mybatis的配置文件进行解析的类。</p>
<p>typeHandlerElement方法作用就是进行typeHandlers节点解析。</p>
<pre><code>private void typeHandlerElement(XNode parent) throws Exception {
   if (parent != null) {
     for (XNode child : parent.getChildren()) {

             //子节点为package时，获取其name属性的值，然后自动扫描package下自定义的typeHandler

       if (&quot;package&quot;.equals(child.getName())) {
         String typeHandlerPackage = child.getStringAttribute(&quot;name&quot;);
         typeHandlerRegistry.register(typeHandlerPackage);
       } else {

       //子节点为typeHandler时，可以指定javaType属性，也可以执行jdbcType，也可以两者都指定
       //javaType是指定java类型
       //jdbcType是指定jdbc类型（如：timestamp）

         String javaTypeName = child.getStringAttribute(&quot;javaType&quot;);
         String jdbcTypeName = child.getStringAttribute(&quot;jdbcType&quot;);

         //handle就是自定义配置的typeHandler

         String handlerTypeName = child.getStringAttribute(&quot;handler&quot;);
         Class&lt;?&gt; javaTypeClass = resolveClass(javaTypeName);
         JdbcType jdbcType = resolveJdbcType(jdbcTypeName);
         Class&lt;?&gt; typeHandlerClass = resolveClass(handlerTypeName);
         if (javaTypeClass != null) {
           if (jdbcType == null) {

           //注册typeHandler，typeHandler通过TypeHandlerRegistry类管理

             typeHandlerRegistry.register(javaTypeClass, typeHandlerClass);
           } else {
             typeHandlerRegistry.register(javaTypeClass, jdbcType, typeHandlerClass);
           }
         } else {
           typeHandlerRegistry.register(typeHandlerClass);
         }
       }
     }
   }
 }</code></pre><p>TypeHandler管理注册类：TypeHandlerRegistry     </p>
<pre><code>/**
 * @author Clinton Begin
 * @author Kazuki Shimizu
 */
public final class TypeHandlerRegistry {

 ...

  public TypeHandlerRegistry() {
    register(Boolean.class, new BooleanTypeHandler());
    register(boolean.class, new BooleanTypeHandler());
    register(JdbcType.BOOLEAN, new BooleanTypeHandler());
    register(JdbcType.BIT, new BooleanTypeHandler());

    register(Byte.class, new ByteTypeHandler());
    register(byte.class, new ByteTypeHandler());
    register(JdbcType.TINYINT, new ByteTypeHandler());

    register(Short.class, new ShortTypeHandler());
    register(short.class, new ShortTypeHandler());
    register(JdbcType.SMALLINT, new ShortTypeHandler());

    register(Integer.class, new IntegerTypeHandler());
    register(int.class, new IntegerTypeHandler());
    register(JdbcType.INTEGER, new IntegerTypeHandler());

    register(Long.class, new LongTypeHandler());
    register(long.class, new LongTypeHandler());

    register(Float.class, new FloatTypeHandler());
    register(float.class, new FloatTypeHandler());
    register(JdbcType.FLOAT, new FloatTypeHandler());

    register(Double.class, new DoubleTypeHandler());
    register(double.class, new DoubleTypeHandler());
    register(JdbcType.DOUBLE, new DoubleTypeHandler());

    register(Reader.class, new ClobReaderTypeHandler());
    register(String.class, new StringTypeHandler());
    register(String.class, JdbcType.CHAR, new StringTypeHandler());
    register(String.class, JdbcType.CLOB, new ClobTypeHandler());
    register(String.class, JdbcType.VARCHAR, new StringTypeHandler());
    register(String.class, JdbcType.LONGVARCHAR, new ClobTypeHandler());
    register(String.class, JdbcType.NVARCHAR, new NStringTypeHandler());
    register(String.class, JdbcType.NCHAR, new NStringTypeHandler());
    register(String.class, JdbcType.NCLOB, new NClobTypeHandler());
    register(JdbcType.CHAR, new StringTypeHandler());
    register(JdbcType.VARCHAR, new StringTypeHandler());
    register(JdbcType.CLOB, new ClobTypeHandler());
    register(JdbcType.LONGVARCHAR, new ClobTypeHandler());
    register(JdbcType.NVARCHAR, new NStringTypeHandler());
    register(JdbcType.NCHAR, new NStringTypeHandler());
    register(JdbcType.NCLOB, new NClobTypeHandler());

    register(Object.class, JdbcType.ARRAY, new ArrayTypeHandler());
    register(JdbcType.ARRAY, new ArrayTypeHandler());

    register(BigInteger.class, new BigIntegerTypeHandler());
    register(JdbcType.BIGINT, new LongTypeHandler());

    register(BigDecimal.class, new BigDecimalTypeHandler());
    register(JdbcType.REAL, new BigDecimalTypeHandler());
    register(JdbcType.DECIMAL, new BigDecimalTypeHandler());
    register(JdbcType.NUMERIC, new BigDecimalTypeHandler());

    register(InputStream.class, new BlobInputStreamTypeHandler());
    register(Byte[].class, new ByteObjectArrayTypeHandler());
    register(Byte[].class, JdbcType.BLOB, new BlobByteObjectArrayTypeHandler());
    register(Byte[].class, JdbcType.LONGVARBINARY, new BlobByteObjectArrayTypeHandler());
    register(byte[].class, new ByteArrayTypeHandler());
    register(byte[].class, JdbcType.BLOB, new BlobTypeHandler());
    register(byte[].class, JdbcType.LONGVARBINARY, new BlobTypeHandler());
    register(JdbcType.LONGVARBINARY, new BlobTypeHandler());
    register(JdbcType.BLOB, new BlobTypeHandler());

    register(Object.class, UNKNOWN_TYPE_HANDLER);
    register(Object.class, JdbcType.OTHER, UNKNOWN_TYPE_HANDLER);
    register(JdbcType.OTHER, UNKNOWN_TYPE_HANDLER);

    register(Date.class, new DateTypeHandler());
    register(Date.class, JdbcType.DATE, new DateOnlyTypeHandler());
    register(Date.class, JdbcType.TIME, new TimeOnlyTypeHandler());
    register(JdbcType.TIMESTAMP, new DateTypeHandler());
    register(JdbcType.DATE, new DateOnlyTypeHandler());
    register(JdbcType.TIME, new TimeOnlyTypeHandler());

    register(java.sql.Date.class, new SqlDateTypeHandler());
    register(java.sql.Time.class, new SqlTimeTypeHandler());
    register(java.sql.Timestamp.class, new SqlTimestampTypeHandler());

    // mybatis-typehandlers-jsr310
    try {
      // since 1.0.0
      register(&quot;java.time.Instant&quot;, &quot;org.apache.ibatis.type.InstantTypeHandler&quot;);
      register(&quot;java.time.LocalDateTime&quot;, &quot;org.apache.ibatis.type.LocalDateTimeTypeHandler&quot;);
      register(&quot;java.time.LocalDate&quot;, &quot;org.apache.ibatis.type.LocalDateTypeHandler&quot;);
      register(&quot;java.time.LocalTime&quot;, &quot;org.apache.ibatis.type.LocalTimeTypeHandler&quot;);
      register(&quot;java.time.OffsetDateTime&quot;, &quot;org.apache.ibatis.type.OffsetDateTimeTypeHandler&quot;);
      register(&quot;java.time.OffsetTime&quot;, &quot;org.apache.ibatis.type.OffsetTimeTypeHandler&quot;);
      register(&quot;java.time.ZonedDateTime&quot;, &quot;org.apache.ibatis.type.ZonedDateTimeTypeHandler&quot;);
      // since 1.0.1
      register(&quot;java.time.Month&quot;, &quot;org.apache.ibatis.type.MonthTypeHandler&quot;);
      register(&quot;java.time.Year&quot;, &quot;org.apache.ibatis.type.YearTypeHandler&quot;);
      // since 1.0.2
      register(&quot;java.time.YearMonth&quot;, &quot;org.apache.ibatis.type.YearMonthTypeHandler&quot;);
      register(&quot;java.time.chrono.JapaneseDate&quot;, &quot;org.apache.ibatis.type.JapaneseDateTypeHandler&quot;);

    } catch (ClassNotFoundException e) {
      // no JSR-310 handlers
    }

    // issue #273
    register(Character.class, new CharacterTypeHandler());
    register(char.class, new CharacterTypeHandler());
  }

...      
}</code></pre><p>查看TypeHandlerRegistry类，可知mybatis实现了哪些TypeHandler。</p>
<h3 id="DateTypeHandler"><a href="#DateTypeHandler" class="headerlink" title="DateTypeHandler"></a>DateTypeHandler</h3><p>我们需求是java Date类型转为Long。</p>
<p>查看DateTypeHandler 是否满足。</p>
<pre><code>/**
 * @author Clinton Begin
 */
public class DateTypeHandler extends BaseTypeHandler&lt;Date&gt; {

  @Override
  public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType)
      throws SQLException {
    ps.setTimestamp(i, new Timestamp((parameter).getTime()));
  }

  @Override
  public Date getNullableResult(ResultSet rs, String columnName)
      throws SQLException {
    Timestamp sqlTimestamp = rs.getTimestamp(columnName);
    if (sqlTimestamp != null) {
      return new Date(sqlTimestamp.getTime());
    }
    return null;
  }

  @Override
  public Date getNullableResult(ResultSet rs, int columnIndex)
      throws SQLException {
    Timestamp sqlTimestamp = rs.getTimestamp(columnIndex);
    if (sqlTimestamp != null) {
      return new Date(sqlTimestamp.getTime());
    }
    return null;
  }

  @Override
  public Date getNullableResult(CallableStatement cs, int columnIndex)
      throws SQLException {
    Timestamp sqlTimestamp = cs.getTimestamp(columnIndex);
    if (sqlTimestamp != null) {
      return new Date(sqlTimestamp.getTime());
    }
    return null;
  }
}</code></pre><p>myabtis实现的DateType是将Java Date转为sql timestamp。虽然不满足我们的需求。</p>
<p>但可以照葫芦画瓢，我们自定义实现一个DateTypeHandler，将Java Date 转为Long。</p>
<p>package com.springboot.demo.typehandler;</p>
<p>import org.apache.ibatis.type.BaseTypeHandler;<br>import org.apache.ibatis.type.JdbcType;<br>import org.apache.ibatis.type.MappedJdbcTypes;<br>import org.apache.ibatis.type.MappedTypes;</p>
<p>import java.sql.CallableStatement;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br>import java.util.Date;</p>
<pre><code>/**
 * @author : zyh
 * @Description : java Date和Long互转
 * @date : 2019-05-26 20:49
 */
@MappedJdbcTypes(JdbcType.BIGINT)
@MappedTypes({java.util.Date.class})
public class DateTypeHandler extends BaseTypeHandler&lt;Date&gt; {
    @Override
    public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType) throws SQLException {
        //将Java Date转为Long时间戳
        ps.setLong(i, parameter.getTime());
    }

    @Override
    public Date getNullableResult(ResultSet rs, String columnName) throws SQLException {
        String timestamp = rs.getString(columnName);
        //将db中存储的时间戳转为java Date
        if (timestamp != null) {
            return new Date(Long.valueOf(timestamp));
        }
        return null;
    }

    @Override
    public Date getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
        String timestamp = rs.getString(columnIndex);
        if (timestamp != null) {
            return new Date(Long.valueOf(timestamp));
        }
        return null;
    }

    @Override
    public Date getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
        String timestamp = cs.getString(columnIndex);
        if (timestamp != null) {
            return new Date(Long.valueOf(timestamp));
        }
        return null;
    }
}</code></pre><p>mybatis-config.xml</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--useGeneratedKeys参数只针对insert语句生效，默认为false，当设置为true时，表示如果插入的表以自增列为主键，
    则允许JDBC支持自动生成主键，并可将自动生成的主键返回，--&gt;
    &lt;settings&gt;
        &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot;/&gt;
    &lt;/settings&gt;

    &lt;typeAliases&gt;
        &lt;package name=&quot;com.xx.xx&quot; /&gt;
    &lt;/typeAliases&gt;

    &lt;typeHandlers&gt;
        &lt;typeHandler handler=&quot;com.xx.xx.typeHandler.DateTypeHandler&quot; /&gt;
    &lt;/typeHandlers&gt;

&lt;/configuration&gt;</code></pre><p> 经测试，java Date在db存入timstamp。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
</search>
